#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#include <errno.h>
#include <sys/types.h>
#include <unistd.h>
#include <signal.h>
#include <setjmp.h>
#define NORMAL 0
#define RESTART 1
#define QUIT 2
#define DEVIDER 32768

extern jmp_buf env;

static void handler_devidebyzero(int signum);
static void handler_stopprocess(int signum);
static void handler_contprocess(int signum);


volatile long unsigned v1;
volatile long unsigned v2 = DEVIDER;

jmp_buf env;
int main() {
   long unsigned result;
   struct sigaction sa;
	struct timespec req = {0};
	int milisec = 1;
	req.tv_sec = 0;
	req.tv_nsec = milisec * 100000L; //100us

   switch(setjmp(env)){
   case NORMAL:
	   break;
   case RESTART:
	   /*Restart the process with stable correct data */
	   v1 = 8210000040400000000UL;
	   v2 = DEVIDER;
	   result = 0;
	   break;
   }

   printf("Restart process: PID %d\n", getpid());
   sleep(3);
   /*Establish handler for SIGTSTP if it is not being ignored*/
   if(sigaction(SIGTSTP, NULL, &sa) == -1)
	   perror("sigaction");

   if(sa.sa_handler != SIG_IGN) {
	   sigemptyset(&sa.sa_mask);
	   sa.sa_flags = SA_RESTART;
	   /* Set handler for SIGTSTP signal */
	   sa.sa_handler = handler_stopprocess;

	   /*________________________________*/
	   if(sigaction(SIGTSTP, &sa, NULL) == -1)
		   perror("sigaction SIGTSTP");
   }

   /*Establish handler for SIGCONT if it is not being ignored*/
   if(sigaction(SIGCONT, NULL, &sa) == -1)
	   perror("sigaction");

   if(sa.sa_handler != SIG_IGN) {
	   sigemptyset(&sa.sa_mask);
	   sa.sa_flags = SA_RESTART;
	   /* Set handler for SIGCONT signal */
	   sa.sa_handler = handler_contprocess;

	   /*________________________________*/
	   if(sigaction(SIGCONT, &sa, NULL) == -1)
		   perror("sigaction SIGCONT");
   }

   /*Establish handler for SIGFPE if it is not being ignored*/
   if(sigaction(SIGFPE, NULL, &sa) == -1)
	   perror("sigaction");

   if(sa.sa_handler != SIG_IGN) {
	   sigemptyset(&sa.sa_mask);
	   sa.sa_flags = SA_RESTART;
	   /* Set handler for SIGFPE signal */
	   sa.sa_handler = handler_devidebyzero;

	   /*________________________________*/
	   if(sigaction(SIGFPE, &sa, NULL) == -1)
		   perror("sigaction SIGFPE");
   }

   v1 = 8210000040400000000UL;
   while(1){
	 result = v1/v2;
	 printf("Result of Divide by %lu is %lu \n", v2, result);
	 nanosleep(&req, (struct timespec *)NULL);
	 v2--;
	 if(result == 0) v1 = 8210000040400000000UL;
	 if(v2 = 0) v2 = DEVIDER;
   }
   return 0;
}

static void handler_devidebyzero(int signum) {
	sigset_t tstpMask, prevMask;
	int savedErrno;
	struct sigaction sa;

	savedErrno = errno;

	printf("Caught SIGFPE \n");
	/* set handling to default */
    /*________________________________*/
	if(signal(SIGFPE, SIG_DFL) == SIG_ERR)

		perror("signal SIGFPE\n");

	/*Unblock SIGFPE; the pending SIGFPE immediately suspends the program*/
	sigemptyset(&tstpMask);
	sigaddset(&tstpMask, SIGFPE);
	if(sigprocmask(SIG_UNBLOCK, &tstpMask, &prevMask) == -1)
		perror("sigprocmask SIGFPE\n");

	/* process restart after SIGFPE catching */
	longjmp(env, RESTART);
	/*Execution resumes here after SIGCONT*/
	if(sigprocmask(SIG_SETMASK, &prevMask, NULL) == -1)
		perror("sigprocmask SIGFPE\n"); /*Reblock SIGTSTP*/

	/* Reestablish handler if needed*/
	sigemptyset(&sa.sa_mask);
	sa.sa_flags = SA_RESTART;
	sa.sa_handler = handler_devidebyzero;
	if(sigaction(SIGFPE, &sa, NULL) == -1)
		perror("sigaction SIGFPE\n");


	printf("Exiting SIGFPE handler \n");
	errno = savedErrno;

	return;
}

static void handler_stopprocess(int signum) {
	sigset_t tstpMask, prevMask;
	int savedErrno;
	struct sigaction sa;

	savedErrno = errno;

	printf("Caught SIGTSTP \n");
	/* set handling to default */
	//sleep(1);
	if(signal(SIGCONT, SIG_DFL) == SIG_ERR)



    /*________________________________*/
		perror("signal \n"); /*set hadling to default*/

	raise(SIGTSTP);

	/*Unblock SIGTSTP; the pending SIGTSTP immediately suspends the program*/
	sigemptyset(&tstpMask);
	sigaddset(&tstpMask, SIGTSTP);
	if(sigprocmask(SIG_UNBLOCK, &tstpMask, &prevMask) == -1)
		perror("sigprocmask");

	/*Execution resumes here after SIGCONT*/
	if(sigprocmask(SIG_SETMASK, &prevMask, NULL) == -1)
		perror("sigprocmask"); /*Reblock SIGTSTP*/

	/* Reestablish handler */
	sigemptyset(&sa.sa_mask);
	sa.sa_flags = SA_RESTART;
    /* Set handler for SIGTSTP signal */
    /*________________________________*/
	if(sigaction(SIGTSTP, &sa, NULL) == -1)
		perror("sigaction");

	printf("Exiting SIGTSTP handler \n");
	errno = savedErrno;
    return;
}

static void handler_contprocess(int signum) {
	sigset_t tstpMask, prevMask;
	int savedErrno;
	struct sigaction sa;

	savedErrno = errno;

	printf("Caught SIGCONT \n");
	/*uncomment line below only to ensure that signal have been caught*/
	//sleep(1);
	if(signal(SIGCONT, SIG_DFL) == SIG_ERR)
		perror("signal"); /*set hadling to default*/

	raise(SIGCONT);

	/*Unblock SIGCONT; the pending SIGCONT immediately suspends the program*/
	sigemptyset(&tstpMask);
	sigaddset(&tstpMask, SIGCONT);
	if(sigprocmask(SIG_UNBLOCK, &tstpMask, &prevMask) == -1)
		perror("sigprocmask");

	/*Execution resumes here after SIGCONT*/

	if(sigprocmask(SIG_SETMASK, &prevMask, NULL) == -1)
		perror("sigprocmask"); /*Reblock SIGTSTP*/

	sigemptyset(&sa.sa_mask);   /*Reestablish handler*/
	sa.sa_flags = SA_RESTART;
    /* Set handler for SIGONT signal */
    /*________________________________*/
	sa.sa_handler = handler_contprocess;

	if(sigaction(SIGCONT, &sa, NULL) == -1)
		perror("sigaction");

	printf("Exiting SIGTSTP handler \n");
	errno = savedErrno;
    return;
}

