#include <stdio.h>
#include <stdlib.h>
#include <sys/mman.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <unistd.h>
#include <semaphore.h>
#include <string.h>

#define SemaphoreName "/Semex"
#define ByteSize 0x10000000
#define progname "Server_ShMem"

typedef struct my_msg_t {
   int  type;
   char content[256];
} Message_t;

void report_and_exit(const char* msg) {
  perror(msg);
  exit(-1);
}

const char *BackingFile = "Shared_Memory";
char *MemContents = "Komunikat_nr_0_do_pamieci_wspoldzielonej\0";
struct my_msg_t MyMessage;

int main() {
  int li=0;
  /* empty to begin, creating name in namespace for shared memory*/
  /*________________________________________________________*/
  int fd = shm_open(BackingFile, O_RDWR | O_CREAT, 0666);
  if (fd < 0) report_and_exit("Can't get file descriptor...");

  /* get a pointer to memory */
  /*________________________________________________________*/
  /* let system pick where to put
   segment */
  caddr_t memptr = mmap(NULL, ByteSize, /*how many bytes */
  PROT_READ | PROT_WRITE, /*access protections */
  MAP_SHARED, /*mapping visible to other processes */
  fd, /*file descriptor */
  0); /*offset: start at 1st byte */

  if ((caddr_t) -1 == memptr) report_and_exit("Can't access segment...");

  fprintf(stderr, "%s: shared mem address: %p [0..%d] \n", progname, memptr, ByteSize - 1);
  fprintf(stderr, "%s: backing file:       /dev/shm/%s \n", progname, BackingFile );

  /* create a semaphore for mutual exclusion */
  /*________________________________________________________*/
  sem_t* semptr = sem_open(SemaphoreName, /* name */
  O_CREAT,
   /* create the semaphore */
  S_IRWXU,
   /* protection perms */
  0);
   /* initial value */

  if (semptr == (void*) -1) report_and_exit("sem_open");

  while(1){
	/* use semaphore as a mutex (lock) by waiting for writer to increment it */
    /*________________________________________________________*/
	  sem_wait(semptr);

    /*reading from shared memory*/
    /*________________________________________________________*/
	  memcpy((void *)&MyMessage, (void *)memptr, sizeof(MyMessage));
    printf("Message type: %d, Message content: %s \n", MyMessage.type, MyMessage.content);
	li++;

	if(li > 9) break;
  }
  /* cleanup */
  munmap(memptr, ByteSize);
  close(fd);
  sem_close(semptr);
  unlink(BackingFile);
  return 0;
}
