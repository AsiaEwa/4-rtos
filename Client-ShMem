#include <stdio.h>
#include <stdlib.h>
#include <semaphore.h>
#include <string.h>
#include <unistd.h>
#include <sys/mman.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <memory.h>

#define SemaphoreName "/Semex"
#define MESSAGE_CONT   "Komunikat_nr_0_do_pamieci_wspoldzielonej"
#define ByteSize 0x10000000

typedef struct my_msg_t {
   int  type;
   char content[256];
} Message_t;

void report_and_exit(const char* msg) {
  perror(msg);
  exit(-1);
}


const char *BackingFile = "/Shared_Memory";
char MemContents[256] = {0};
struct my_msg_t MyMessage;

int main() {
  int i=0;
  int fd = shm_open(
  BackingFile,
   /* name from smem.h */
  O_RDWR | O_CREAT, /* read/write, create if needed */
  0666);
   /* access permissions (0644) */

  /* empty to begin, creating name in namespace for shared memory*/
  /*_____________________________________________________________*/
  if (fd < 0) report_and_exit("Can't open shared mem segment...");

  ftruncate(fd, ByteSize); /* get the bytes */
  caddr_t memptr = mmap (NULL,
  ByteSize, /* how many bytes */
  PROT_READ | PROT_WRITE, /* access protections */
  MAP_SHARED,/* mapping visible to other processes */
  fd,  /* file descriptor */
  0);
   /* offset: start at 1st byte */


  /* get a pointer to memory */
  /*_____________________________________________________________*/
  if ((caddr_t) -1  == memptr) report_and_exit("Can't get segment...");

  fprintf(stderr, "shared mem address: %p [0..%d]\n", memptr, ByteSize - 1);
  fprintf(stderr, "backing file:       /dev/shm/%s\n", BackingFile );

  /* semaphore code to lock an access to the shared mem */
  /*_____________________________________________________________*/
  sem_t* semptr = sem_open(SemaphoreName, /* name */
  O_CREAT,
   /* create the semaphore */
  S_IRWXU,
   /* protection perms */
  0);
   /* initial value */

  if (semptr == (void*) -1) report_and_exit("sem_open");

  /*storing message content in message buffer*/
  /*________________________________________________________*/
  memcpy((void *)MyMessage.content, (void *)MESSAGE_CONT,
  sizeof(MESSAGE_CONT));

  while(1){
	 MyMessage.type=i;
	 MyMessage.content[13]=(char)(i+48);
	 /* copy some ASCII bytes to the shared memory */
     /*________________________________________________________*/
     printf("Data are written to shared memory\n");

     /* increment the semaphore so that Server_ShMem can read from shared memory*/
     /*________________________________________________________*/
     memcpy((void *)memptr, (void *)&MyMessage, sizeof(MyMessage));

     if (sem_post(semptr) < 0) report_and_exit("sem_post");
i++;
     if(i > 9) break;
     sleep(2); /* give reader a chance */
  }
  /* clean up */
  munmap(memptr, ByteSize); /* unmap the storage */
  close(fd);
  sem_close(semptr);
  shm_unlink(BackingFile); /* unlink from the backing file */
  return 0;
}
